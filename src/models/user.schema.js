import mongoose from "mongoose";
import AuthRoles from "../utils/authRoles.js";
import bcrypt from "bcryptjs";
import JWT from "jsonwebtoken";
import config from "../config/index.js";
import crypto from "crypto";

const userSchema = new  mongoose.Schema(
    {
        name: {
            type: String,
            required: [true, "Name is Required"],
            maxLength: [50, "Name must be < 50 chars"]
        },
        email:{
            type: String,
            required: [true, "Email is Required"]
        },
        password: {
            type: String,
            required:[true, "Password is required"],
            minLength: [8, "password must be atleast 8 chars"],
            select: false         // not alllow to retrive as default
        },
        role:{
            type: String,
            enum: Object.values(AuthRoles),
            default: AuthRoles.USER           // default if user doesn't provide it takes as default USER
        },
        forgotPasswordToken: String,
        forgotPasswordExpiry: Date      // allow limited duration only to change pwd
    },
    {timestamps: true}
)

// Encrypt the password before saving : HOOKS
userSchema.pre("save", async function(next) {
    if (!this.isModified("password")) return next();
    try {
        const hashedPassword = await bcrypt.hash(this.password, 10); // 10 is the salt value 
        this.password = hashedPassword;
        next();
    } catch (error) {
        return next(error);
    }
});

userSchema.methods = {
    // compare password 
    comparePassword: async function(enteredPassword){
        return await bcrypt.compare(enteredPassword, this.password)
    },
    // generate JWT token
    getJWTtoken: function(){
        JWT.sign({_id: this._id, role:this.role}, config.JWT_SECRET, {
            expiresIn: config.JWT_EXPIRY
        })
    },
    //generate forgot password token
    generateForgotPasswordToken: function(){
        const forgotToken = crypto.randomBytes(20).toString("hex")

        // just to encrypt the token generated by crypto
        this.forgotPasswordToken = crypto
        .createHash("sha256")  // encrypt name
        .update(forgotToken)
        .digest("hex")

        // time for token to expire
        this.forgotPasswordExpiry = Date.now() + 20*60*1000     // 20 mins

        return forgotToken;
    }
}

export default mongoose.model("User", userSchema);  // users : stored as in db





